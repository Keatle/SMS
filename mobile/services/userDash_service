import 'dart:convert';
import 'package:byte_blossoms/screens/createRequirements.dart';
import 'package:http/http.dart' as http;
import 'package:byte_blossoms/url/url.dart';

class UserService
 {
  final String baseUrl = URL.getBaseUrl();

   Future<int> fetchUnreadNotificationCount(String userID) async {
    try {
      var token = await TokenStorage.readToken();
      if (token == null) {
        throw Exception('No authorization token found.');
      }

      final response = await http.get(Uri.parse('$baseUrl/notifications/unreadCount/$userID'),
          headers: {
            'Authorization': 'Bearer $token',
          });
      if (response.statusCode == 200) {
        
        return json.decode(response.body)['enreadCount'];
      } else {
        throw Exception('Failed to fetch unread notifications count');
      }
    } catch (e) {
      print('Error fetching unread notifications count: $e');
      return 0; 
    }
  }

  Future<String?> fetchUserDetails(String userID) async 
  {
    try {
      final response = await http.get(Uri.parse('$baseUrl/getFullNames/$userID'));

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body); // Treated as a list

        if (data.isNotEmpty) {
          // Extract the first item from the list and access 'name' and 'surname'
          final String name = data[0]['name'] ?? '';
          final String surname = data[0]['surname'] ?? '';
          return '$name $surname'; // Concatenate name and surname
        } else {
          return 'No Name No Surname'; // In case the list is empty
        }
      } else {
        print('Failed to fetch user details: ${response.statusCode}');
        return null; // Handle HTTP errors
      }
    } catch (e) {
      print('Error fetching user details: $e');
      return null; // Handle exceptions
    }
  }
}
